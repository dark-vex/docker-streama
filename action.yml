name: 'Hello World'
description: 'Greet someone'
inputs:
  #GITHUB_TOKEN:
  #  description: 'A Github PAT'
  #  required: true
  #DOCKER_USER:
  #  description: 'Docker User'
  #  required: true
  #DOCKER_PASS:
  #  description: 'Docker Pass'
  #  required: true
  #SYSDIG_SECURE_TOKEN:
  #  description: 'Secure API Token'
  #  required: true
  who-to-greet:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
outputs:
  versioning:
    description: "test" 
    value: ${{ steps.versioning.outputs.version-id }}
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps:
    # Check out code
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}
    # Create a release after a successfull build and image scanning
    - id: release
      uses: rymndhng/release-on-push-action@master
      with:
        bump_version_scheme: patch
        tag_prefix: v

    - name: Check Output Parameters
      id: version-id
      run: |
        echo "Got tag name ${{ steps.release.outputs.tag_name }}"
        echo "Got release version ${{ steps.release.outputs.version }}"
      shell: bash

    - id: versioning
      run: echo "::set-output name=version-id::$(echo $RANDOM)"
      shell: bash

    - name: Generate static files
      run: |
        docker buildx build --push --platform linux/amd64 -t docker.io/darkvex/docker-streama:test-${{ steps.release.outputs.version }} -t docker.io/darkvex/docker-streama:test -f Dockerfile .
      shell: bash
      

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}
    #- name: Download artifact
    #  uses: actions/download-artifact@v2
    #  with:
    #    name: Save image version

    - name: Generate static files
      run: |
        docker pull docker.io/darkvex/docker-streama:test
      shell: bash

    - name: Scan image
      id: scan
      uses: sysdiglabs/scan-action@v3
      with:
        image-tag: "docker.io/darkvex/docker-streama:test"
        sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
        input-type: docker-daemon
        run-as-user: root

    - name: Update Scan results
      uses: github/codeql-action/upload-sarif@v1
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarifReport }}
