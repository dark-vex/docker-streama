name: Build multi-arch image and deploy
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]
  
jobs:
  build_arlfail:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      # Check out code
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      # Create a release after a successfull build and image scanning
      - id: release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch
          tag_prefix: v

      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"

      - name: Generate static files
        run: |
          docker buildx build --push --platform linux/amd64 -t docker.io/darkvex/docker-streama:test-${{ steps.release.outputs.version }} -t docker.io/darkvex/docker-streama:test -f Dockerfile .

    outputs:
      version: ${{ steps.release.outputs.version }}

  scan_image:
    runs-on: ubuntu-latest
    needs: build_arlfail
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      #- name: Download artifact
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: Save image version
  
      - name: Generate static files
        run: |
          docker pull docker.io/darkvex/docker-streama:test
      - name: Scan image
        id: scan
        uses: sysdiglabs/scan-action@v3
        with:
          image-tag: "docker.io/darkvex/docker-streama:test"
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
          input-type: docker-daemon
          run-as-user: root

      - name: Update Scan results
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarifReport }}
